"""
1,模块(Modules)：
    1）一个模块可以包含多个函数，多个类(类中包含属性和方法），多个语句
    2)在Python中一个扩展名为.py的文件就是一个模块
    3)使用模块的好处
        ①方便其他程序和脚本的导入并使用
        ②避免函数名和变量名冲突(不同模块内的同名变量不会相互影响）
        ③提高代码的可维护性
        ④提高代码的可重用性
2,模块的创建和导入
    1)创建模块:
        新建一个.py文件，名称尽量不要与Python自带的标准模块名称相同
    2)导入模块:
        ①import 模块名称 [as 别名]        #这种方式导入的是模块全部内容，模块内的所有内容都可使用
        ②from 模块名称 import 函数/变量/类   #这种方式导入的是模块的部分内容，只能使用导入的内容，模块内未导入的内容不可使用，如果要使用需要将未导入部分继续导入
    3）自定义模块的导入:在目录下右击->点击Mark Directory as->点击Sources Root 即可解决不能导入模块问题
    4）以主程序形式运行:
        在每个模块的定义中都包括一个记录模块名称的变量__name__,程序可以检查该变量，以确定他们可以在哪个模块中执行。如果一个模块不是被导入
        到其他程序中执行，那么它可能在解释器的顶级模块中执行。顶级模块的__name__变量的值为__main__
        将需要只在本模块内执行的内容放在
        if __name__=='__main__'
        之下即可
        那么在其他模块中调用本模块的其他内容时，将不会执行
3,Python中的包
    1)包是一个分层次的目录结构，它将一组功能相近的模块组织在一个目录下
    2）作用：
        ①代码规范
        ②避免模块名称冲突
    3）包与目录的区别
        ①包含__init__.py文件的目录称为包
        ②目录里通常不包含__init__.py文件
    4）包的导入
        import 包名.模块名
        注意：
        ①使用import方式进行导入时，只能跟包名或模块名
        ②使用from...import可以导入包，模块，函数，变量
4,Python中常用的内置模块
    1)sys
    2)time
    3)os
    4)calendar
    5)urllib
    6)json
    7)re
    8)math
    9decimal
    10)logging
5,第三方模块的安装和使用
    1)安装
    pip install 模块名
    2)使用
    import 模块名



"""
import self_modle
print(self_modle.add(3,5))
print(self_modle.div(2,3))

